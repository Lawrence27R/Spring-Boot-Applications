package com.aurionpro.bankapp.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.aurionpro.bankapp.dto.CustomerRegistrationDto;
import com.aurionpro.bankapp.dto.LoginDto;
import com.aurionpro.bankapp.dto.RegistrationDto;
import com.aurionpro.bankapp.entity.Role;
import com.aurionpro.bankapp.entity.User;
import com.aurionpro.bankapp.exception.UserApiException;
import com.aurionpro.bankapp.repository.RoleRepository;
import com.aurionpro.bankapp.repository.UserRepository;
import com.aurionpro.bankapp.security.JwtTokenProvider;

import jakarta.mail.MessagingException;

@Service
public class AuthServiceImpl implements AuthService{

	@Autowired
	private AuthenticationManager authenticationManager;

	@Autowired
	private UserRepository userRepo;

	@Autowired
	private PasswordEncoder passwordEncoder;

	@Autowired
	private JwtTokenProvider tokenProvider;

	@Autowired
	private RoleRepository roleRepo;
	
	@Autowired
    private EmailSenderService emailSenderService;

    @Override
    public User adminRegister(RegistrationDto registrationDto) {
        if (userRepo.existsByEmailId(registrationDto.getEmailId()))
            throw new UserApiException(HttpStatus.BAD_REQUEST, "User already exists");

        User user = new User();
        user.setFirstname(registrationDto.getFirstname());
        user.setLastname(registrationDto.getLastname());
        user.setEmailId(registrationDto.getEmailId());
        user.setPassword(passwordEncoder.encode(registrationDto.getPassword()));

        List<Role> roles = new ArrayList<Role>();

        Role userRole = roleRepo.findByRolename(registrationDto.getRolename()).get();

        roles.add(userRole);
        user.setRole(roles);

        User registeredUser = userRepo.save(user);

        sendRegistrationEmail(registeredUser);

        return registeredUser;
    }
    
    @Override
    public User customerRegister(CustomerRegistrationDto customerRegistrationDto) {
        // Check if the user already exists by email
        if (userRepo.existsByEmailId(customerRegistrationDto.getEmailId()))
            throw new UserApiException(HttpStatus.BAD_REQUEST, "User already exists");

        // Create a new User entity and set its properties
        User user = new User();
        user.setFirstname(customerRegistrationDto.getFirstname());
        user.setLastname(customerRegistrationDto.getLastname());
        user.setEmailId(customerRegistrationDto.getEmailId());

        // Convert the DTO KycStatus to Entity KycStatus
        user.setKycStatus(com.aurionpro.bankapp.entity.KycStatus.valueOf(customerRegistrationDto.getKycStatus().name()));

        // Set the password (hashed)
        user.setPassword(passwordEncoder.encode(customerRegistrationDto.getPassword()));

        // Assign roles to the user
        List<Role> roles = new ArrayList<>();
        Role userRole = roleRepo.findByRolename(customerRegistrationDto.getRolename())
                                .orElseThrow(() -> new RuntimeException("Role not found")); // Handle role lookup
        roles.add(userRole);
        user.setRole(roles);

        // Save the new user to the database
        User registeredUser = userRepo.save(user);

        // Send registration email
        sendRegistrationEmail(registeredUser);

        return registeredUser;
    }


    @Override
    public String login(LoginDto loginDto) {
        try {
            Authentication authentication = authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(loginDto.getUsername(), loginDto.getPassword()));
            SecurityContextHolder.getContext().setAuthentication(authentication);
            String token = tokenProvider.generateToken(authentication);

            return token;
        } catch (BadCredentialsException e) {
            throw new UserApiException(HttpStatus.NOT_FOUND, "Invalid login details");
        }
    }

	
    private void sendRegistrationEmail(User user) {
        String subject = "Registration Successful on AurionPro Bank";
        String body = String.format("Dear %s %s, your registration was successful!.",
                user.getFirstname(), user.getLastname());

        try {
            emailSenderService.sendEmail(user.getEmailId(), body, subject, null);
        } catch (MessagingException e) {
            System.err.println("Failed to send registration email: " + e.getMessage());
        }
    }
}
