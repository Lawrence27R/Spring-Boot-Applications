package com.aurionpro.bankapp.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.aurionpro.bankapp.dto.LoginDto;
import com.aurionpro.bankapp.dto.RegistrationDto;
import com.aurionpro.bankapp.entity.Customer;
import com.aurionpro.bankapp.entity.Role;
import com.aurionpro.bankapp.exception.UserApiException;
import com.aurionpro.bankapp.repository.CustomerRepository;
import com.aurionpro.bankapp.repository.RoleRepository;
import com.aurionpro.bankapp.security.JwtTokenProvider;

@Service
public class AuthServiceImpl implements AuthService{

	@Autowired
	private AuthenticationManager authenticationManager;

	@Autowired
	private CustomerRepository userRepo;

	@Autowired
	private PasswordEncoder passwordEncoder;

	@Autowired
	private JwtTokenProvider tokenProvider;

	@Autowired
	private RoleRepository roleRepo;

	@Override
	public Customer register(RegistrationDto registrationDto) {
		if (userRepo.existsByEmailId(registrationDto.getUsername()))
			throw new UserApiException(HttpStatus.BAD_REQUEST, "User already exists");

		Customer user = new Customer();
		user.setEmailId(registrationDto.getUsername());
		user.setCustomerPassword(passwordEncoder.encode(registrationDto.getPassword()));

		List<Role> roles = new ArrayList<Role>();

		Role userRole = roleRepo.findByRolename(registrationDto.getRolename()).get();

		roles.add(userRole);
		user.setRole(roles);
		return userRepo.save(user);
	}

	@Override
	public String login(LoginDto loginDto) {
		try {
			Authentication authentication = authenticationManager.authenticate(
					new UsernamePasswordAuthenticationToken(loginDto.getUsername(), loginDto.getPassword()));
			SecurityContextHolder.getContext().setAuthentication(authentication);
			String token = tokenProvider.generateToken(authentication);

			return token;
		} catch (BadCredentialsException e) {
			throw new UserApiException(HttpStatus.NOT_FOUND, "Invaid login details");
		}
	}
}
