package com.aurionpro.bankapp.controllers;

import java.util.Date;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.aurionpro.bankapp.dto.CaptchaSettings;
import com.aurionpro.bankapp.dto.ErrorResponsePageDto;
import com.aurionpro.bankapp.dto.JwtAuthResponse;
import com.aurionpro.bankapp.dto.LoginDto;
import com.aurionpro.bankapp.dto.RegistrationDto;
import com.aurionpro.bankapp.entity.User;
import com.aurionpro.bankapp.service.AuthService;
import com.aurionpro.bankapp.service.CaptchaGeneratorService;

import cn.apiclub.captcha.Captcha;

@RestController
@RequestMapping("/bankApp")
public class LoginController {

    @Autowired
    private AuthService authService;

    @Autowired
    private CaptchaGeneratorService captchaGeneratorService;

    @Value("${captcha.debug:false}")
    private boolean isDebug;

    private static final Map<String, String> captchaCache = new ConcurrentHashMap<>();
    private static final long CAPTCHA_EXPIRY_TIME = 5 * 60 * 1000; // 5 minutes

    @PostMapping("/register")
    public ResponseEntity<User> adminRegister(@RequestBody RegistrationDto registrationDto) {
        return ResponseEntity.ok(authService.adminRegister(registrationDto));
    }

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody LoginDto loginDto) {
        String hiddenCaptcha = captchaCache.get(loginDto.getCaptchaId());

        if (hiddenCaptcha == null || !loginDto.getCaptcha().equalsIgnoreCase(hiddenCaptcha)) {
            ErrorResponsePageDto errorResponse = new ErrorResponsePageDto();
            errorResponse.setStatus(HttpStatus.BAD_REQUEST.value());
            errorResponse.setTimeStamp(new Date());
            errorResponse.setErrorMessages(Map.of("captcha", "Invalid Captcha"));
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse);
        }

        try {
            String token = authService.login(loginDto);
            JwtAuthResponse jwtAuthResponse = new JwtAuthResponse();
            jwtAuthResponse.setAccessToken(token);

//            captchaCache.remove(loginDto.getCaptchaId());

            return ResponseEntity.ok(jwtAuthResponse);
        } catch (Exception e) {
            ErrorResponsePageDto errorResponse = new ErrorResponsePageDto();
            errorResponse.setStatus(HttpStatus.UNAUTHORIZED.value());
            errorResponse.setTimeStamp(new Date());
            errorResponse.setErrorMessages(Map.of("authentication", "Authentication failed"));
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(errorResponse);
        }
    }

    @GetMapping("/captcha")
    public ResponseEntity<CaptchaSettings> getCaptcha() {
        Captcha captcha = CaptchaGeneratorService.generateCaptcha(250, 90);
        String encodedCaptcha = CaptchaGeneratorService.encodeCaptchatoBinary(captcha);

        String captchaId = UUID.randomUUID().toString();
        captchaCache.put(captchaId, captcha.getAnswer());

        CaptchaSettings captchaSettings = new CaptchaSettings();
        captchaSettings.setRealCaptcha(encodedCaptcha);
//        captchaSettings.setCaptchaId(captchaId);
//        if (!isDebug) {
//        	captchaSettings.setCaptcha(captchaId)
//        }
       	captchaSettings.setCaptcha(captcha.getAnswer());

        return ResponseEntity.ok(captchaSettings);
    }
}
