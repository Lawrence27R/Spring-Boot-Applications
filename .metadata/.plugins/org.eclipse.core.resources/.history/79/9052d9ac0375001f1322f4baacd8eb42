package com.aurionpro.bankapp.service;

import java.io.File;
import java.io.FileWriter;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.aurionpro.bankapp.dto.PageResponseDto;
import com.aurionpro.bankapp.dto.TransactionDto;
import com.aurionpro.bankapp.dto.TransactionFilterDto;
import com.aurionpro.bankapp.entity.CustomerAccount;
import com.aurionpro.bankapp.entity.Transaction;
import com.aurionpro.bankapp.repository.TransactionRepository;

import io.jsonwebtoken.io.IOException;
import jakarta.mail.MessagingException;

@Service
public class TransactionServiceImpl implements TransactionService {

    @Autowired
    private TransactionRepository transactionRepository;

    @Override
    public PageResponseDto<TransactionDto> getCustomerTransactions(TransactionFilterDto filterDto, int pageNumber, int pageSize) {
        Pageable pageable = PageRequest.of(pageNumber, pageSize);

        if (filterDto == null) {
            filterDto = new TransactionFilterDto();
        }

        Page<Transaction> transactions;
        if (filterDto.getCustomerAccountNum() != null) {
            transactions = transactionRepository.findByAccount_AccountNumber(filterDto.getCustomerAccountNum(), pageable);
        } else {
            transactions = transactionRepository.findAll(pageable);
        }
        return filterAndConvertToDto(transactions, filterDto);
    }

    @Override
    public PageResponseDto<TransactionDto> getAllTransactions(TransactionFilterDto filterDto, int pageNumber, int pageSize) {
        Pageable pageable = PageRequest.of(pageNumber, pageSize);

        if (filterDto == null) {
            filterDto = new TransactionFilterDto();
        }

        Page<Transaction> transactions = transactionRepository.findAll(pageable);
        return filterAndConvertToDto(transactions, filterDto);
    }

    private PageResponseDto<TransactionDto> filterAndConvertToDto(Page<Transaction> transactions, TransactionFilterDto filterDto) {
        List<TransactionDto> filteredTransactions = transactions.stream()
            .filter(transaction -> {
                boolean matches = true;

                if (filterDto.getStartDate() != null && transaction.getDate().before(filterDto.getStartDate())) {
                    matches = false;
                }

                if (filterDto.getEndDate() != null && transaction.getDate().after(filterDto.getEndDate())) {
                    matches = false;
                }

                if (filterDto.getTypeOfTrans() != null && !transaction.getTypeOfTransaction().toString().equals(filterDto.getTypeOfTrans())) {
                    matches = false;
                }

                return matches;
            })
            .map(this::convertToDto)
            .collect(Collectors.toList());

        return new PageResponseDto<>(transactions.getTotalElements(), transactions.getTotalPages(), transactions.getSize(), filteredTransactions,
                transactions.isLast());
    }

    private TransactionDto convertToDto(Transaction transaction) {
        return new TransactionDto(
            transaction.getTransactionId(),
            transaction.getSenderAccount(),
            transaction.getReceiverAccount(),
            transaction.getTypeOfTransaction(),
            transaction.getAmount(),
            transaction.getDate()
        );
    }
    
    public void sendMonthlyPassbook(String emailId, Long accountNumber) throws MessagingException, IOException {

        // Find account by account number
        CustomerAccount account = customerAccountRepository.findByAccountNumber(accountNumber);

        if (account == null) {
            throw new IllegalArgumentException("Account not found");
        }

        // Define the date range (last month)
        LocalDate now = LocalDate.now();
        LocalDate oneMonthAgo = now.minusMonths(1);
        Date fromDate = Date.from(oneMonthAgo.atStartOfDay(ZoneId.systemDefault()).toInstant());
        Date toDate = Date.from(now.atStartOfDay(ZoneId.systemDefault()).toInstant());

        // Retrieve transactions for the account within the last month
        Page<Transaction> transactions = transactionRepository.findByAccount_AccountNumber(accountNumber, 
            PageRequest.of(0, Integer.MAX_VALUE)); // Retrieves all transactions for the account

        if (transactions.isEmpty()) {
            throw new IllegalArgumentException("No transactions found for the last month");
        }

        // Generate the passbook file (e.g., CSV or text format)
        String passbookFilePath = generatePassbookFile(transactions.getContent());

        // Send email with the passbook attached
        emailSenderService.sendEmail(emailId, "Please find attached your monthly passbook.", "Monthly Passbook", passbookFilePath);
    }

    // Utility method to generate a simple passbook file (you can change this to generate PDFs or other formats)
    private String generatePassbookFile(List<Transaction> transactions) throws IOException {
        String fileName = "passbook_" + System.currentTimeMillis() + ".txt"; // Example: creating a text file
        File passbookFile = new File(fileName);
        FileWriter writer = new FileWriter(passbookFile);

        // Write header information
        writer.write("Monthly Passbook\n");
        writer.write("------------------------------------------------------\n");

        // Write transaction details
        for (Transaction transaction : transactions) {
            writer.write("Transaction ID: " + transaction.getTransactionId() + "\n");
            writer.write("Date: " + transaction.getDate() + "\n");
            writer.write("Sender Account: " + transaction.getSenderAccount() + "\n");
            writer.write("Receiver Account: " + transaction.getReceiverAccount() + "\n");
            writer.write("Transaction Type: " + transaction.getTypeOfTransaction() + "\n");
            writer.write("Amount: " + transaction.getAmount() + "\n");
            writer.write("------------------------------------------------------\n");
        }

        writer.close();
        return passbookFile.getAbsolutePath();
    }
}
}
