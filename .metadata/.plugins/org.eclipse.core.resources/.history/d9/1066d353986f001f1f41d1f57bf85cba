@RestController
@RequestMapping("/bankApp")
public class LoginController {

    @Autowired
    private AuthService authService;

    @Autowired
    private CaptchaGeneratorService captchaGeneratorService;

    @Value("${captcha.debug:false}")
    private boolean isDebug;

    private static final Map<String, String> captchaCache = new ConcurrentHashMap<>();
    private static final long CAPTCHA_EXPIRY_TIME = 5 * 60 * 1000; // 5 minutes

    @PostMapping("/register")
    public ResponseEntity<User> adminRegister(@RequestBody RegistrationDto registrationDto) {
        return ResponseEntity.ok(authService.adminRegister(registrationDto));
    }

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody LoginDto loginDto) {
        // Get the captcha answer from the cache
        String hiddenCaptcha = captchaCache.get(loginDto.getCaptcha());

        // Verify the captcha
        if (hiddenCaptcha == null || !loginDto.getCaptcha().equalsIgnoreCase(hiddenCaptcha)) {
            ErrorResponsePageDto errorResponse = new ErrorResponsePageDto();
            errorResponse.setStatus(HttpStatus.BAD_REQUEST.value());
            errorResponse.setTimeStamp(new Date());
            errorResponse.setErrorMessages(Map.of("captcha", "Invalid Captcha"));
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse);
        }

        try {
            String token = authService.login(loginDto);
            JwtAuthResponse jwtAuthResponse = new JwtAuthResponse();
            jwtAuthResponse.setAccessToken(token);

            // Remove captcha after successful validation
            captchaCache.remove(loginDto.getCaptcha());

            return ResponseEntity.ok(jwtAuthResponse);
        } catch (Exception e) {
            ErrorResponsePageDto errorResponse = new ErrorResponsePageDto();
            errorResponse.setStatus(HttpStatus.UNAUTHORIZED.value());
            errorResponse.setTimeStamp(new Date());
            errorResponse.setErrorMessages(Map.of("authentication", "Authentication failed"));
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(errorResponse);
        }
    }

    @GetMapping("/captcha")
    public ResponseEntity<CaptchaSettings> getCaptcha() {
        // Generate captcha
        Captcha captcha = CaptchaGeneratorService.generateCaptcha(250, 90);
        String encodedCaptcha = CaptchaGeneratorService.encodeCaptchatoBinary(captcha);

        // Cache the answer for later comparison
        captchaCache.put(captcha.getAnswer(), captcha.getAnswer());

        // Prepare response with captcha image and text (text is only for debug mode)
        CaptchaSettings captchaSettings = new CaptchaSettings();
        captchaSettings.setRealCaptcha(encodedCaptcha);

        // Send the captcha answer if in debug mode
        if (isDebug) {
            captchaSettings.setCaptcha(captcha.getAnswer());
        } else {
            captchaSettings.setCaptcha(""); // Do not send actual captcha in non-debug mode
        }

        return ResponseEntity.ok(captchaSettings);
    }
}
