package com.aurionpro.bankapp.controllers;

import java.util.Date;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.aurionpro.bankapp.dto.CaptchaSettings;
import com.aurionpro.bankapp.dto.ErrorResponsePageDto;
import com.aurionpro.bankapp.dto.JwtAuthResponse;
import com.aurionpro.bankapp.dto.LoginDto;
import com.aurionpro.bankapp.dto.RegistrationDto;
import com.aurionpro.bankapp.entity.User;
import com.aurionpro.bankapp.service.AuthService;
import com.aurionpro.bankapp.service.CaptchaGeneratorService;

import cn.apiclub.captcha.Captcha;

@RestController
@RequestMapping("/bankApp")
public class LoginController {

    @Autowired
    private AuthService authService;

    @Autowired
    private CaptchaGeneratorService captchaGeneratorService;

    // In-memory cache for storing captcha IDs and hidden captcha answers
    private static final Map<String, String> captchaCache = new ConcurrentHashMap<>();

    @PostMapping("/register")
    public ResponseEntity<User> register(@RequestBody RegistrationDto registrationDto) {
        return ResponseEntity.ok(authService.register(registrationDto));
    }

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody LoginDto loginDto) {
        // Fetch the stored hidden captcha answer using captchaId
        String hiddenCaptcha = captchaCache.get(loginDto.getCaptchaId());

        if (hiddenCaptcha == null || !loginDto.getCaptcha().equalsIgnoreCase(hiddenCaptcha)) {
            // Prepare error response with ErrorResponsePageDto
            ErrorResponsePageDto errorResponse = new ErrorResponsePageDto();
            errorResponse.setStatus(HttpStatus.BAD_REQUEST.value());
            errorResponse.setTimeStamp(new Date());

            Map<String, String> errorMessages = Map.of("captcha", "Invalid Captcha");
            errorResponse.setErrorMessages(errorMessages);

            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse);
        }

        // Authenticate and generate JWT token
        String token = authService.login(loginDto);
        JwtAuthResponse jwtAuthResponse = new JwtAuthResponse();
        jwtAuthResponse.setAccessToken(token);

        // Remove used captcha from cache
        captchaCache.remove(loginDto.getCaptchaId());

        return ResponseEntity.ok(jwtAuthResponse);
    }

    @GetMapping("/captcha")
    public ResponseEntity<CaptchaSettings> getCaptcha() {
        Captcha captcha = CaptchaGeneratorService.generateCaptcha(250, 90);
        String encodedCaptcha = CaptchaGeneratorService.encodeCaptchatoBinary(captcha);

        // Create a unique ID for this captcha session
        String captchaId = UUID.randomUUID().toString();

        // Store the hidden captcha answer (in this case, the correct answer) in the cache
        captchaCache.put(captchaId, captcha.getAnswer());

        // Return the captcha and the captchaId (client will use these in the login request)
        CaptchaSettings captchaSettings = new CaptchaSettings();
        captchaSettings.setCaptcha(encodedCaptcha);
        captchaSettings.setCaptchaId(captchaId);  // Send only the captchaId to the client

        return ResponseEntity.ok(captchaSettings);
    }
}
