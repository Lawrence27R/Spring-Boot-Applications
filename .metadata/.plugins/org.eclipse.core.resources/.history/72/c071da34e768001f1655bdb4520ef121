package com.aurionpro.bankapp.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.aurionpro.bankapp.dto.CustomerAccountInfoDto;
import com.aurionpro.bankapp.entity.Customer;
import com.aurionpro.bankapp.entity.CustomerAccount;
import com.aurionpro.bankapp.repository.CustomerAccountRepository;
import com.aurionpro.bankapp.repository.CustomerRepository;

@Service
public class AddCustomerBankAccountImpl implements AddCustomerBankAccount{
	
    @Autowired
    private CustomerRepository customerRepository;

    @Autowired
    private CustomerAccountRepository customerAccountRepository;

	@Override
	public Optional<Customer> findCustomerById(int customerId) {
		return customerRepository.findById(customerId);
	}

    @Override
    public CustomerAccount createAccountForCustomer(Customer customer) {
        CustomerAccount account = new CustomerAccount();
        
        long accountNumber;
        
        do {
            accountNumber = generateRandomAccountNumber();
        } while (customerAccountRepository.existsByAccountNumber(accountNumber));
        account.setAccountNumber(accountNumber);

        account.setCustomerBalance(5000);
        account.setCustomer(customer);

        return customerAccountRepository.save(account);
    }
    
    private long generateRandomAccountNumber() {
        // Prefix for account number
        final long PREFIX = 1050_0000;
        long suffix = (long) (Math.random() * 10000);
        return PREFIX + suffix;
    }
    
    @Override
    public List<CustomerAccountInfoDto> getAllCustomerAccounts(String firstname, String lastname, Long accountNumber) {
        List<CustomerAccount> accounts = customerAccountRepository.findAll();
        List<CustomerAccountInfoDto> filteredAccounts = new ArrayList<>();

        for (CustomerAccount account : accounts) {
            boolean matches = true;
            
            if (firstname != null && !account.getCustomer().getFirstname().equalsIgnoreCase(firstname)) {
                matches = false;
            }
            
            if (lastname != null && !account.getCustomer().getLastname().equalsIgnoreCase(lastname)) {
                matches = false;
            }
            
            if (accountNumber != null && !account.getAccountNumber().equals(accountNumber)) {
                matches = false;
            }
            
            if (matches) {
                filteredAccounts.add(convertToDto(account));
            }
        }
        
        return filteredAccounts;
    }

    private CustomerAccountInfoDto convertToDto(CustomerAccount account) {
        return new CustomerAccountInfoDto(
            account.getCustomer().getFirstname(),
            account.getCustomer().getLastname(),
            account.getAccountNumber(),
            account.getCustomerBalance()
        );
    }


}
