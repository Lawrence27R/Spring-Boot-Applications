package com.aurionpro.bankapp.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.aurionpro.bankapp.dto.CustomerAccountInfoDto;
import com.aurionpro.bankapp.dto.PageResponseDto;
import com.aurionpro.bankapp.entity.CustomerAccount;
import com.aurionpro.bankapp.entity.User;
import com.aurionpro.bankapp.repository.CustomerAccountRepository;
import com.aurionpro.bankapp.repository.UserRepository;

import jakarta.mail.MessagingException;

@Service
public class AdminServiceImpl implements AdminService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private CustomerAccountRepository customerAccountRepository;
    
    @Autowired
    private EmailSenderService emailSenderService;

    @Override
    public Optional<User> findCustomerById(int customerId) {
        return userRepository.findByUserId(customerId);
    }

    @Override
    public CustomerAccount createAccountForCustomer(User customer) {
        CustomerAccount account = new CustomerAccount();

        long accountNumber;
        do {
            accountNumber = generateRandomAccountNumber();
        } while (customerAccountRepository.existsByAccountNumber(accountNumber));
        account.setAccountNumber(accountNumber);
        account.setCustomerBalance(5000); // Initial balance
        account.setUser(customer);

        // Save the account to the repository
        CustomerAccount createdAccount = customerAccountRepository.save(account);

        // Send email to the customer after account creation
        sendAccountCreationEmail(customer, createdAccount);

        return createdAccount;
    }

    private long generateRandomAccountNumber() {
        final long PREFIX = 1050_0000L;
        long SUFFIX = 1000 + (long) (Math.random() * 10000);
        return PREFIX + SUFFIX;
    }

    private void sendAccountCreationEmail(User customer, CustomerAccount account) {
        String subject = "Your Bank Account Has Been Created!";
        String body = String.format("Dear %s %s, your bank account has been successfully created. "
                + "Your account number is %d, and your initial balance is %.2f. You can now log in and use our services. Thank you for banking with us.",
                customer.getFirstname(),
                customer.getLastname(),
                account.getAccountNumber(),
                account.getCustomerBalance());

        try {
            emailSenderService.sendEmail(customer.getEmailId(), body, subject, null);
        } catch (MessagingException e) {
            System.err.println("Failed to send account creation email: " + e.getMessage());
        }
    }

    @Override
    public PageResponseDto<CustomerAccountInfoDto> getAllCustomerAccounts(String firstname, String lastname,
            Long accountNumber, int pageNumber, int pageSize) {

        Pageable pageable = PageRequest.of(pageNumber, pageSize);
        Page<CustomerAccount> accounts;

        if (firstname != null && lastname != null) {
            accounts = customerAccountRepository.findByUserFirstnameIgnoreCaseAndUser_LastnameIgnoreCase(firstname,
                    lastname, pageable);
        } else if (firstname != null) {
            accounts = customerAccountRepository.findByUserFirstnameIgnoreCase(firstname, pageable);
        } else if (lastname != null) {
            accounts = customerAccountRepository.findByUserLastnameIgnoreCase(lastname, pageable);
        } else if (accountNumber != null) {
            accounts = customerAccountRepository.findByAccountNumber(accountNumber, pageable);
        } else {
            accounts = customerAccountRepository.findAll(pageable);
        }

        List<CustomerAccountInfoDto> accountDtos = accounts.map(this::convertToDto).getContent();

        return new PageResponseDto<>(accounts.getTotalElements(), accounts.getTotalPages(), accounts.getSize(),
                accountDtos, accounts.isLast());
    }

    private CustomerAccountInfoDto convertToDto(CustomerAccount account) {
        return new CustomerAccountInfoDto(account.getUser().getFirstname(), account.getUser().getLastname(),
                account.getAccountNumber(), account.getCustomerBalance());
    }

    @Override
    public PageResponseDto<User> getAllCustomers(int pageNumber, int pageSize) {
        Pageable pageable = PageRequest.of(pageNumber, pageSize);
        Page<User> userPage = userRepository.findAll(pageable);

        List<User> userList = userPage.getContent();

        return new PageResponseDto<>(userPage.getTotalElements(), userPage.getTotalPages(), userPage.getSize(),
                userList, userPage.isLast());
    }

    @Override
    public PageResponseDto<User> getFilteredCustomers(String firstname, String lastname, Integer customerId,
            int pageNumber, int pageSize) {

        Pageable pageable = PageRequest.of(pageNumber, pageSize);
        Page<User> users;

        if (firstname != null && lastname != null) {
            users = userRepository.findByFirstnameIgnoreCaseAndLastnameIgnoreCase(firstname, lastname, pageable);
        } else if (firstname != null) {
            users = userRepository.findByFirstnameIgnoreCase(firstname, pageable);
        } else if (lastname != null) {
            users = userRepository.findByLastnameIgnoreCase(lastname, pageable);
        } else if (customerId != null) {
            Optional<User> user = userRepository.findByUserId(customerId);
            users = user.map(u -> new PageImpl<>(List.of(u), pageable, 1))
                        .orElseGet(() -> Page.empty());
        } else {
            users = userRepository.findAll(pageable);
        }

        List<User> userList = users.getContent();

        return new PageResponseDto<>(users.getTotalElements(), users.getTotalPages(), users.getSize(), userList,
                users.isLast());
    }
}
