package com.aurionpro.bankapp.service;

import java.io.File;
import java.io.FileWriter;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.aurionpro.bankapp.dto.PageResponseDto;
import com.aurionpro.bankapp.dto.TransactionDto;
import com.aurionpro.bankapp.dto.TransactionFilterDto;
import com.aurionpro.bankapp.entity.Transaction;
import com.aurionpro.bankapp.repository.CustomerAccountRepository;
import com.aurionpro.bankapp.repository.TransactionRepository;

import io.jsonwebtoken.io.IOException;
import jakarta.mail.MessagingException;

@Service
public class TransactionServiceImpl implements TransactionService {

	@Autowired
	private TransactionRepository transactionRepository;

	@Autowired
	private EmailSenderService emailSenderService;

	@Autowired
	private CustomerAccountRepository customerAccountRepository;

	@Override
	public PageResponseDto<TransactionDto> getCustomerTransactions(TransactionFilterDto filterDto, int pageNumber,
			int pageSize) {
		Pageable pageable = PageRequest.of(pageNumber, pageSize);

		if (filterDto == null) {
			filterDto = new TransactionFilterDto();
		}

		Page<Transaction> transactions;
		if (filterDto.getCustomerAccountNum() != null) {
			transactions = transactionRepository.findByAccount_AccountNumber(filterDto.getCustomerAccountNum(),
					pageable);
		} else {
			transactions = transactionRepository.findAll(pageable);
		}
		return filterAndConvertToDto(transactions, filterDto);
	}

	@Override
	public PageResponseDto<TransactionDto> getAllTransactions(TransactionFilterDto filterDto, int pageNumber,
			int pageSize) {
		Pageable pageable = PageRequest.of(pageNumber, pageSize);

		if (filterDto == null) {
			filterDto = new TransactionFilterDto();
		}

		Page<Transaction> transactions = transactionRepository.findAll(pageable);
		return filterAndConvertToDto(transactions, filterDto);
	}

	private PageResponseDto<TransactionDto> filterAndConvertToDto(Page<Transaction> transactions,
			TransactionFilterDto filterDto) {
		List<TransactionDto> filteredTransactions = transactions.stream().filter(transaction -> {
			boolean matches = true;

			if (filterDto.getStartDate() != null && transaction.getDate().before(filterDto.getStartDate())) {
				matches = false;
			}

			if (filterDto.getEndDate() != null && transaction.getDate().after(filterDto.getEndDate())) {
				matches = false;
			}

			if (filterDto.getTypeOfTrans() != null
					&& !transaction.getTypeOfTransaction().toString().equals(filterDto.getTypeOfTrans())) {
				matches = false;
			}

			return matches;
		}).map(this::convertToDto).collect(Collectors.toList());

		return new PageResponseDto<>(transactions.getTotalElements(), transactions.getTotalPages(),
				transactions.getSize(), filteredTransactions, transactions.isLast());
	}

	private TransactionDto convertToDto(Transaction transaction) {
		return new TransactionDto(transaction.getTransactionId(), transaction.getSenderAccount(),
				transaction.getReceiverAccount(), transaction.getTypeOfTransaction(), transaction.getAmount(),
				transaction.getDate());
	}

	@Override
	public void sendMonthlyPassbook(String email, Long accountNumber) throws MessagingException, IOException {
	    // Get the current date and subtract 1 month to get transactions for the last month
	    LocalDate currentDate = LocalDate.now();
	    LocalDate oneMonthAgo = currentDate.minusMonths(1);
	    Date startDate = Date.from(oneMonthAgo.atStartOfDay(ZoneId.systemDefault()).toInstant());
	    Date endDate = Date.from(currentDate.atStartOfDay(ZoneId.systemDefault()).toInstant());

	    // Fetch transactions for the given account number within the past month
	    List<Transaction> transactions = transactionRepository.findByAccount_AccountNumberAndDateBetween(accountNumber, startDate, endDate);

	    // If no transactions, handle appropriately (can return early or log the result)
	    if (transactions.isEmpty()) {
	        throw new MessagingException("No transactions found for the past month");
	    }

	    // Generate passbook content file
	    String filePath;
		try {
			filePath = generatePassbookFile(transactions);
			String subject = "Monthly Passbook for Account " + accountNumber;
			emailSenderService.sendEmailWithAttachment(email, subject, "Please find your monthly passbook attached.", filePath);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (java.io.IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	    // Send the email with the passbook file
	}


	private String generatePassbookFile(List<Transaction> transactions) throws IOException, java.io.IOException {
	    String fileName = "passbook_" + System.currentTimeMillis() + ".csv"; // Example: creating a CSV file
	    File passbookFile = new File(fileName);
	    FileWriter writer = new FileWriter(passbookFile);

	    // Write header information
	    writer.write("Transaction ID,Date,Sender Account,Receiver Account,Transaction Type,Amount\n");

	    // Write transaction details
	    for (Transaction transaction : transactions) {
	        writer.write(transaction.getTransactionId() + "," 
	            + transaction.getDate() + ","
	            + transaction.getSenderAccount() + ","
	            + transaction.getReceiverAccount() + ","
	            + transaction.getTypeOfTransaction() + ","
	            + transaction.getAmount() + "\n");
	    }

	    writer.close();
	    return passbookFile.getAbsolutePath();
	}

	
    @Override
    public List<Transaction> getMonthlyTransactions(Long accountNumber) {
        // Get the current date and subtract 1 month to get transactions for the last month
        LocalDate currentDate = LocalDate.now();
        LocalDate oneMonthAgo = currentDate.minusMonths(1);
        Date startDate = Date.from(oneMonthAgo.atStartOfDay(ZoneId.systemDefault()).toInstant());
        Date endDate = Date.from(currentDate.atStartOfDay(ZoneId.systemDefault()).toInstant());

        // Fetch transactions for the given account number within the past month
        return transactionRepository.findByAccount_AccountNumberAndDateBetween(accountNumber, startDate, endDate);
    }
}
